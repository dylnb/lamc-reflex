
==================== FINAL INTERFACE ====================
2015-11-03 20:04:17.279168 UTC

interface main@main:Main 7102
  interface hash: c575cb1bb9d6e2caa23ba9bb4a137e23
  ABI hash: 5bf2316f1fee6e9b59f18fbcb2c36078
  export-list hash: 6f4895a4c48030ea36e4bb5349693367
  orphan hash: 26bf0cfba3a9ad75557172debe20800c
  flag hash: 5866b43124d96a385735f63547bce98e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.cf2db
  Main.comp
  Main.ex2
  Main.ex3
  Main.ex4
  Main.ident
  Main.k3
  Main.labelConstraints
  Main.labelMeanings
  Main.labelNormals
  Main.labelTypes
  Main.main
  Main.mu2cf
  Main.mu2db
  Main.pp
  Main.t1
  Main.t2
module dependencies:
package dependencies: StateVar-1.1.0.1@State_6K4a3UqSdqh6lGAm1wlr9s
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0*
                      base-orphans-0.4.4@baseo_E55c3OEBLyu45sND7mOuE9
                      bifunctors-5@bifun_6cWzSBWZD9ID5wcfOFIydn
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bound-1.0.6@bound_FIK0Q7alZKo32m6neuVHva
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      bytes-0.15.0.1@bytes_H8qcVNPPgeW3UxaWRJv4Oh
                      cereal-0.4.1.1@cerea_LMaR4P6lFvNJtmY00msKYH
                      comonad-4.2.7.2@comon_EsayKmuIGPJJdbMoBEcxRq
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      contravariant-1.3.3@contr_1HGRfJ7yos72LK91k3YDgI
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      distributive-0.4.4@distr_IiTFZxvjHzA0FvKz3AU35Q
                      free-4.12.1@free_2EJeoNML59VIyuzJGfHGjD ghc-prim-0.4.0.0
                      hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy
                      hashable-extras-0.2.2@hasha_9lOVH88b48ZLAqTz1S5Of9
                      integer-gmp-1.0.0.0 lamc-0.1.0.0@lamc_5eVrUU1K4dW8f168hbG4XR
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      prelude-extras-0.4.0.2@prelu_57eavILAbKD5CaKv31zEDY
                      profunctors-5.1.1@profu_IRUD0QFY0OF0nZWAglFFc5
                      semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO
                      semigroupoids-5.0.0.4@semig_IPk36dXHATB4yo2y5KnSeX
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      tagged-0.8.1@tagge_6Tf46oJAk552xT73wGffBW
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         bound-1.0.6@bound_FIK0Q7alZKo32m6neuVHva:Bound.Var
                         bytes-0.15.0.1@bytes_H8qcVNPPgeW3UxaWRJv4Oh:Data.Bytes.Get
                         bytes-0.15.0.1@bytes_H8qcVNPPgeW3UxaWRJv4Oh:Data.Bytes.Signed
                         bytes-0.15.0.1@bytes_H8qcVNPPgeW3UxaWRJv4Oh:Data.Bytes.VarInt
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.List.NonEmpty
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.Semigroup
                         tagged-0.8.1@tagge_6Tf46oJAk552xT73wGffBW:Data.Tagged
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashSet
import  -/  base-4.8.1.0:Data.Traversable 89769555cf5e62f4edd3d085405c2caa
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO 29a6f3d7c8ad8a4e6200d8bbb6e70aae
import  -/  comonad-4.2.7.2@comon_EsayKmuIGPJJdbMoBEcxRq:Control.Comonad f0fdf88abe807bcdf90a4ea2377f0d0c
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map 5e4cbf1ca2e6c8cfaecf2b4e95371357
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base 7ea108dc1481cad0b32efe810e49ad43
import  -/  free-4.12.1@free_2EJeoNML59VIyuzJGfHGjD:Control.Comonad.Cofree c75d0e75b71777ade08ee79afa8d3c55
import  -/  free-4.12.1@free_2EJeoNML59VIyuzJGfHGjD:Control.Comonad.Cofree.Class a2e7da567ebc6dcb234f16b6e2976e4e
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  lamc-0.1.0.0@lamc_5eVrUU1K4dW8f168hbG4XR:CofreeTree bce01e372bc8bbfc8df66ff866273871
import  -/  lamc-0.1.0.0@lamc_5eVrUU1K4dW8f168hbG4XR:DbExp 2c871b58ec3e6a5e18514b97f796835a
import  -/  lamc-0.1.0.0@lamc_5eVrUU1K4dW8f168hbG4XR:Eval 168490057ebc2cd747c7bf7b4aa324bf
import  -/  lamc-0.1.0.0@lamc_5eVrUU1K4dW8f168hbG4XR:TypeCheck 2e882904f0cb945232264cb643f883cf
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.State d96af44e8d2501342f4d849385ed921c
import  -/  transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.State.Lazy c08c12a521658e8ac939bca69680ffbc
ddd8572e3345391b001a8920168b69a2
  $s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT
         (TypeCheck.TypeState
            (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult))
         Data.Functor.Identity.Identity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       (TypeCheck.TypeState
                          (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult))
                       Data.Functor.Identity.Identity)
                  Main.$s$fApplicativeStateT_$dFunctor
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure
                     @ (TypeCheck.TypeState
                          (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult))
                     @ Data.Functor.Identity.Identity
                     Main.$s$fApplicativeStateT_$dFunctor
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*>
                     @ (TypeCheck.TypeState
                          (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult))
                     @ Data.Functor.Identity.Identity
                     Main.$s$fApplicativeStateT_$dFunctor
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*>
                     @ (TypeCheck.TypeState
                          (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult))
                     @ Data.Functor.Identity.Identity
                     Main.$s$fApplicativeStateT_$dFunctor
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*
                     @ (TypeCheck.TypeState
                          (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult))
                     @ Data.Functor.Identity.Identity
                     Main.$s$fApplicativeStateT_$dFunctor
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity) -}
61e7c3923ffb02baf0e9edd78ecb87af
  $s$fApplicativeStateT_$dFunctor ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT
         (TypeCheck.TypeState
            (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult))
         Data.Functor.Identity.Identity)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Main.$s$fApplicativeStateT_$s$fFunctorStateT
                   @ (TypeCheck.TypeState
                        (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult))) -}
eba428dda7651d4139a9dc01fd814fc1
  $s$fApplicativeStateT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s Data.Functor.Identity.Identity)
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap
                     @ s
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fFunctorIdentity)
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$c<$
                     @ s
                     @ Data.Functor.Identity.Identity
                     Data.Functor.Identity.$fFunctorIdentity) -}
749542c6494b2ec7ccb72fcb92cc3546
  $wa :: Eval.Val -> (# Eval.Val -> Eval.Val #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: Eval.Val ->
                 case w of wild {
                   Eval.VInt ipv
                   -> case Main.labelMeanings16
                      ret_ty (# Eval.Val -> Eval.Val #)
                      of {}
                   Eval.VFun g
                   -> let {
                        lvl17 :: GHC.Types.Int
                        = case g Main.labelMeanings14 of wild1 {
                            Eval.VInt i -> i Eval.VFun ipv -> Main.labelMeanings13 }
                      } in
                      (# \ ds :: Eval.Val ->
                         case ds of wild1 {
                           Eval.VInt ipv -> Main.labelMeanings12
                           Eval.VFun h
                           -> Eval.VInt
                                (case lvl17 of wild2 { GHC.Types.I# x ->
                                 case h Main.labelMeanings10 of wild3 {
                                   Eval.VInt j
                                   -> case j of wild4 { GHC.Types.I# y ->
                                      GHC.Types.I# (GHC.Prim.+# x y) }
                                   Eval.VFun ipv -> Main.labelMeanings9 } }) } #) }) -}
1f3385221cd7b2c50b8922db49233bbc
  $wcf2db ::
    CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST a)
    -> DbExp.Exp GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
d2a029fe438cdbf9cdeeeecd9b9cd205
  $wmu2cf ::
    CofreeTree.MuTree
    -> (# (),
          CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ()) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>, Inline: [0] -}
ebcad888dba4edecc9c87549191a8d10
  cf2db :: CofreeTree.CfTree a -> DbExp.Exp GHC.Base.String
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a11 w :: CofreeTree.CfTree a11 ->
                 case w of ww { Control.Comonad.Cofree.:< ww1 ww2 ->
                 Main.$wcf2db @ a11 ww2 }) -}
5319459a8ebbadd4e49110d9bfd19112
  comp :: CofreeTree.MuTree
  {- Strictness: m1,
     Unfolding: InlineRule (0, True, True)
                Main.comp1
                  `cast`
                (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N)) -}
3545c76af7a4a004520d3d81cec5c6ae
  comp1 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m1,
     Unfolding: (CofreeTree.ALambda
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp11
                   Main.comp2
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
dad87ee5f9a17fc0648c8e699bf57ea2
  comp10 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m5,
     Unfolding: (CofreeTree.AIdent
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp11) -}
501846249b840a5e4cc46341b55597a5
  comp11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "f"#) -}
01a33eeccef668d1899ca70e3e29bb41
  comp2 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m1,
     Unfolding: (CofreeTree.ALambda
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp9
                   Main.comp3
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
19867df040cb280a006b45c80e131b0b
  comp3 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m1,
     Unfolding: (CofreeTree.ALambda
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp7
                   Main.comp4
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
79a17937d93075d6a78e9f4a71dfa718
  comp4 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp10 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.comp5
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
607e4df8b9b1f16fac5cae42a151b825
  comp5 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp8 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.comp6
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
d18ee53e4bd533e8dc677f729360bb07
  comp6 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m5,
     Unfolding: (CofreeTree.AIdent
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp7) -}
551fe98a5460b7712767b707e0f3808e
  comp7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x"#) -}
4e1e9217ae618dd807b33994a4009cac
  comp8 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m5,
     Unfolding: (CofreeTree.AIdent
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp9) -}
de7d4a9bf0bd5ecfc173eb90bf8e07d1
  comp9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "g"#) -}
465100d773c92aa21ca1978ba8ac3346
  ex1 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.ex7 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.ex5
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
878286f09db80834076d099cba085fb8
  ex10 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m1,
     Unfolding: (CofreeTree.ALambda
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.ex13
                   Main.ex11
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
377713c04f45d71115164e52334801c2
  ex11 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (CofreeTree.ANumber
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.ex12) -}
fe22fb78474cdf0d464ca8ab8472db7b
  ex12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3) -}
49a8e3b1ff4a5bba21a207dddefbc3be
  ex13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "k"#) -}
cfb6101eaaec46e6acb961ed11a41937
  ex14 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.ex15 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.ex8
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
0e47877f0a852805b645f847a779265f
  ex15 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m1,
     Unfolding: (CofreeTree.ALambda
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp11
                   Main.ex16
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
3347cfd65f5dfe3e107623a6dd3f65c5
  ex16 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp10 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.comp10
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
143c500a308c32112b62bf820b7052ee
  ex17 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp6 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.comp6
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
3072d6682ff392e29eb00e269826cf6c
  ex2 :: CofreeTree.MuTree
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Main.ex1 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N)) -}
b7a5d2b19e712ca71691d80f383b5012
  ex3 :: CofreeTree.MuTree
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Main.ex14
                  `cast`
                (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N)) -}
e471ef02f4df74870b21a1fecf596b9f
  ex4 :: CofreeTree.MuTree
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Main.ex17
                  `cast`
                (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N)) -}
a015ad081c5e9562638296e75ba7b0e2
  ex5 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (CofreeTree.ANumber
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.ex6) -}
a97424f81632dd18e17ab28074ac433c
  ex6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7) -}
d76368cb520f7d828824562470a7daea
  ex7 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.ex9 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.ex8
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
969034631f5340a2c95f78d044bf5951
  ex8 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m1,
     Unfolding: (CofreeTree.ALambda
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp7
                   Main.comp6
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
d1fc72a672bbbd397c71afc42eb4f0b1
  ex9 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.comp1 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.ex10
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
25e111f23de80f9f27988477be20ddc6
  ident :: CofreeTree.MuTree
  {- Strictness: m1,
     Unfolding: InlineRule (0, True, True)
                Main.ex8 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N)) -}
56ec36b985a9eb89c0ada980c22973bc
  k3 :: CofreeTree.MuTree
  {- Strictness: m1,
     Unfolding: InlineRule (0, True, True)
                Main.ex10
                  `cast`
                (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N)) -}
7010ee87a5da755c21cee0ce31c6665c
  labelConstraints ::
    CofreeTree.MuTree
    -> CofreeTree.CfTree (TypeCheck.TypeCheck (CofreeTree.CfTree ()))
  {- Arity: 1, Strictness: <L,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ x :: CofreeTree.MuTree ->
                 case Control.Comonad.Cofree.$w$cextend
                        @ CofreeTree.AST
                        CofreeTree.$fFunctorAST
                        @ ()
                        @ (TypeCheck.TypeCheck (CofreeTree.CfTree ()))
                        Main.labelConstraints1
                        (Main.mu2cf x) of ww { (#,#) ww1 ww2 ->
                 Control.Comonad.Cofree.:<
                   @ CofreeTree.AST
                   @ (TypeCheck.TypeCheck (CofreeTree.CfTree ()))
                   ww1
                   ww2 }) -}
5632e4d0018b61b2990ba351a9e59a80
  labelConstraints1 ::
    CofreeTree.CfTree () -> TypeCheck.TypeCheck (CofreeTree.CfTree ())
  {- Arity: 1,
     Unfolding: (TypeCheck.memoizedTC
                   @ (CofreeTree.CfTree ())
                   TypeCheck.$s$fOrdCofree
                   TypeCheck.generateConstraints1
                     `cast`
                   (<Control.Comonad.Cofree.Cofree CofreeTree.AST ()>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                                  <TypeCheck.TypeState
                                     (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                                     (TypeCheck.Type, TypeCheck.TypeResult)>_N
                                  <Data.Functor.Identity.Identity>_R
                                  <(TypeCheck.Type, TypeCheck.TypeResult)>_N))) -}
fca4049e34f7aba5bd06f02fd4dc94e0
  labelMeanings :: CofreeTree.MuTree -> CofreeTree.CfTree Eval.Val
  {- Arity: 1, Strictness: <L,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ x :: CofreeTree.MuTree ->
                 case Control.Comonad.Cofree.$w$cextend
                        @ CofreeTree.AST
                        CofreeTree.$fFunctorAST
                        @ ()
                        @ Eval.Val
                        Main.labelMeanings1
                        (Main.mu2cf x) of ww { (#,#) ww1 ww2 ->
                 Control.Comonad.Cofree.:< @ CofreeTree.AST @ Eval.Val ww1 ww2 }) -}
f28867f11825480786d5d2a6e06d94e9
  labelMeanings1 ::
    Control.Comonad.Cofree.Cofree CofreeTree.AST () -> Eval.Val
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Control.Comonad.Cofree.Cofree CofreeTree.AST () ->
                 Eval.eval Main.labelMeanings_defEnv (Main.cf2db @ () x)) -}
58f0bba49d249cbd768704ae92b55bf1
  labelMeanings10 :: Eval.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Eval.VInt Main.labelMeanings11) -}
ccd7149678a058c4bc6c191cdc364b09
  labelMeanings11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5) -}
d3109a2d8836459c795384e643383308
  labelMeanings12 :: Eval.Val
  {- Strictness: b -}
77c79138e161f56ca6c2490942c4f116
  labelMeanings13 :: GHC.Types.Int
  {- Strictness: b -}
bd3b7423a9d7f0bbb631781317c59141
  labelMeanings14 :: Eval.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Eval.VInt Main.labelMeanings15) -}
623eddef0c29d5b2787ef299f036ce2d
  labelMeanings15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
27b37716aafbc0bf0073ce6c8efb71a5
  labelMeanings16 :: Eval.Val
  {- Strictness: b -}
b9e60ad2822f61bf666c641216baeb74
  labelMeanings17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "k2k5"#) -}
917d3b35c3b5f45720dc36cbd7c5a41d
  labelMeanings18 :: ([GHC.Types.Char], Eval.Val)
  {- Strictness: m,
     Unfolding: ((Main.labelMeanings24, Main.labelMeanings19)) -}
c9eba97ef6d626c3695a01c7bcf59ff4
  labelMeanings19 :: Eval.Val
  {- Strictness: m2, Unfolding: (Eval.VFun Main.labelMeanings20) -}
a9f34687f9fcfe1d29c7fbcb4ea36a77
  labelMeanings2 :: [([GHC.Types.Char], Eval.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Eval.Val)
                   Main.labelMeanings30
                   Main.labelMeanings3) -}
8b4e46b76c44043072c8da15627fdc3d
  labelMeanings20 :: Eval.Val -> Eval.Val
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Eval.Val ->
                 case ds of wild {
                   Eval.VInt ipv -> Main.labelMeanings23
                   Eval.VFun g -> g Main.labelMeanings21 }) -}
c986fd68b421ca22cc5dd5e4dddd1080
  labelMeanings21 :: Eval.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Eval.VInt Main.labelMeanings22) -}
393b69e5cd8be434ebc3728ad383b0c0
  labelMeanings22 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
7a9ed1a8cdc18a6c4d26fd52cf87901d
  labelMeanings23 :: Eval.Val
  {- Strictness: b -}
ae89da162a58a1f199583328abf82f88
  labelMeanings24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "k1"#) -}
6a8521395260576084d304e94ef62e4d
  labelMeanings25 :: ([GHC.Types.Char], Eval.Val)
  {- Strictness: m,
     Unfolding: ((Main.labelMeanings29, Main.labelMeanings26)) -}
c6c54fca6017cec03a028a9bc356cbd0
  labelMeanings26 :: Eval.Val
  {- Strictness: m2, Unfolding: (Eval.VFun Main.labelMeanings27) -}
1dd11897540ce6f1ed02dd5a1c353da6
  labelMeanings27 :: Eval.Val -> Eval.Val
  {- Arity: 1, Strictness: <S,1*U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Eval.Val ->
                 case ds of wild {
                   Eval.VInt i
                   -> Eval.VInt
                        (case i of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1) })
                   Eval.VFun ipv -> Main.labelMeanings28 }) -}
a4b2e9965e2a7eb4299289f29138f700
  labelMeanings28 :: Eval.Val
  {- Strictness: b -}
fee19c03ed5a771a33360afb081cbfe6
  labelMeanings29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "plus1"#) -}
4a2ba0d603fa56b3357ff5598a24b336
  labelMeanings3 :: [([GHC.Types.Char], Eval.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Eval.Val)
                   Main.labelMeanings25
                   Main.labelMeanings4) -}
e6ac392cab07d02e3f07f1eef5015510
  labelMeanings30 :: ([GHC.Types.Char], Eval.Val)
  {- Strictness: m,
     Unfolding: ((Main.labelMeanings32, Main.labelMeanings31)) -}
7af8a7af28cd0260f0f79b8aa83fd6af
  labelMeanings31 :: Eval.Val
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Eval.VFun (GHC.Base.id @ Eval.Val)) -}
030ecb705e3593f68f6d78751e2568ef
  labelMeanings32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "id"#) -}
82dbc4c98512a76b63194c9c19fcd10d
  labelMeanings33 :: ([GHC.Types.Char], Eval.Val)
  {- Strictness: m,
     Unfolding: ((Main.comp7, Main.labelMeanings34)) -}
c309c15804dee4e10bfd51962355249b
  labelMeanings34 :: Eval.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Eval.VInt Main.labelMeanings35) -}
9477f25afc6bb58d773b55fd4a5938e7
  labelMeanings35 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 25) -}
aa1aac55782227aacd4e24fa61ffaff2
  labelMeanings4 :: [([GHC.Types.Char], Eval.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Eval.Val)
                   Main.labelMeanings18
                   Main.labelMeanings5) -}
3d0fb5eb7506a5cf61201a61bd6dc2fb
  labelMeanings5 :: [([GHC.Types.Char], Eval.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Eval.Val)
                   Main.labelMeanings6
                   (GHC.Types.[] @ ([GHC.Types.Char], Eval.Val))) -}
7b99c3ce57c5ed7e4a181a8ddd303ff7
  labelMeanings6 :: ([GHC.Types.Char], Eval.Val)
  {- Strictness: m,
     Unfolding: ((Main.labelMeanings17, Main.labelMeanings7)) -}
3154f1719be1d91e3d33b8985837315c
  labelMeanings7 :: Eval.Val
  {- Strictness: m2, Unfolding: (Eval.VFun Main.labelMeanings8) -}
30cd5a8e08055fc25876806c4fa04c57
  labelMeanings8 :: Eval.Val -> Eval.Val
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Eval.Val ->
                 case Main.$wa w of ww { (##) ww1 -> Eval.VFun ww1 }) -}
14bdb526876902d6f6db57fd4eec8a6c
  labelMeanings9 :: GHC.Types.Int
  {- Strictness: b -}
5798142a47abb4006585f7ce7045ade3
  labelMeanings_defEnv :: [([GHC.Types.Char], Eval.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Eval.Val)
                   Main.labelMeanings33
                   Main.labelMeanings2) -}
87ee8abecfb0ef955180fe1e5902ea11
  labelNormals ::
    CofreeTree.MuTree -> CofreeTree.CfTree GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ x :: CofreeTree.MuTree ->
                 case Control.Comonad.Cofree.$w$cextend
                        @ CofreeTree.AST
                        CofreeTree.$fFunctorAST
                        @ ()
                        @ GHC.Base.String
                        Main.labelNormals1
                        (Main.mu2cf x) of ww { (#,#) ww1 ww2 ->
                 Control.Comonad.Cofree.:<
                   @ CofreeTree.AST
                   @ GHC.Base.String
                   ww1
                   ww2 }) -}
6b6f5b301f25fb86db343dde80759856
  labelNormals1 ::
    Control.Comonad.Cofree.Cofree CofreeTree.AST () -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Control.Comonad.Cofree.Cofree CofreeTree.AST () ->
                 DbExp.prettyWith
                   DbExp.pretty1
                   (DbExp.nf @ GHC.Base.String (Main.cf2db @ () x))) -}
baf0c557172825aee26590b0c6153375
  labelTypes ::
    CofreeTree.MuTree
    -> GHC.Base.Maybe (CofreeTree.CfTree TypeCheck.Type)
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ t :: CofreeTree.MuTree ->
                 case Control.Comonad.Cofree.$w$cextend
                        @ CofreeTree.AST
                        CofreeTree.$fFunctorAST
                        @ ()
                        @ (TypeCheck.TypeCheck (CofreeTree.CfTree ()))
                        Main.labelConstraints1
                        (Main.mu2cf t) of ww { (#,#) ww1 ww2 ->
                 case ((Control.Comonad.Cofree.$w$csequenceA
                          @ CofreeTree.AST
                          CofreeTree.$fTraversableAST
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               (TypeCheck.TypeState
                                  (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult))
                               Data.Functor.Identity.Identity)
                          @ (TypeCheck.Type, TypeCheck.TypeResult)
                          Main.$s$fApplicativeStateT
                          ww1
                          ww2)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                            <TypeCheck.TypeState
                               (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult)>_N
                            <Data.Functor.Identity.Identity>_R
                            <Control.Comonad.Cofree.Cofree
                               CofreeTree.AST (TypeCheck.Type, TypeCheck.TypeResult)>_N)
                         Main.labelTypes1)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <(Control.Comonad.Cofree.Cofree
                               CofreeTree.AST (TypeCheck.Type, TypeCheck.TypeResult),
                             TypeCheck.TypeState
                               (CofreeTree.CfTree ())
                               (TypeCheck.Type, TypeCheck.TypeResult))>_R) of wild { (,) x ds1 ->
                 case x of wild1 { Control.Comonad.Cofree.:< a11 ds2 ->
                 case a11 of wild2 { (,) ds3 y ->
                 case y of wild3 { TypeCheck.TypeResult ds4 ds5 ->
                 case Main.labelTypes_go ds4 TypeCheck.solveConstraints1 of wild4 {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing @ (CofreeTree.CfTree TypeCheck.Type)
                   GHC.Base.Just a12
                   -> GHC.Base.Just
                        @ (CofreeTree.CfTree TypeCheck.Type)
                        (case Control.Comonad.Cofree.$w$cfmap
                                @ CofreeTree.AST
                                CofreeTree.$fFunctorAST
                                @ (TypeCheck.Type, TypeCheck.TypeResult)
                                @ TypeCheck.Type
                                (\ x1 :: (TypeCheck.Type, TypeCheck.TypeResult) ->
                                 TypeCheck.substitute
                                   a12
                                   (Data.Tuple.fst @ TypeCheck.Type @ TypeCheck.TypeResult x1))
                                wild2
                                ds2 of ww3 { (#,#) ww4 ww5 ->
                         Control.Comonad.Cofree.:<
                           @ CofreeTree.AST
                           @ TypeCheck.Type
                           ww4
                           ww5 }) } } } } } }) -}
c1382427a90c0a6a26594505e7bb99b9
  labelTypes1 ::
    TypeCheck.TypeState
      (CofreeTree.CfTree ()) (TypeCheck.Type, TypeCheck.TypeResult)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (TypeCheck.TypeState
                   @ (CofreeTree.CfTree ())
                   @ (TypeCheck.Type, TypeCheck.TypeResult)
                   Main.labelTypes2
                   (Data.Map.Base.Tip
                      @ (CofreeTree.CfTree ())
                      @ (TypeCheck.Type, TypeCheck.TypeResult))) -}
5e490f6deb36b844002806b9b920fbd6
  labelTypes2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
2e04f5cdb4715aebc48a218bbcea9222
  labelTypes_go ::
    [TypeCheck.Constraint]
    -> GHC.Base.Maybe (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
    -> GHC.Base.Maybe (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
34d41bdf3503d986e881e3d9d14ab223
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
9db8e907ff86b20ef101fd1b563f72c3
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main4
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main3
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv2 } }) -}
cc39ac94809622a48be074a0c0c3ad80
  main2 :: GHC.Base.String
  {- Unfolding: (case Main.$wmu2cf
                        Main.comp1
                          `cast`
                        (Sym (CofreeTree.NTCo:Mu[0]
                                  <CofreeTree.AST>_N)) of ww { (#,#) ww1 ww2 ->
                 DbExp.prettyWith DbExp.pretty1 (Main.$wcf2db @ () ww2) }) -}
152415d553c388364b85d8e0051bb36a
  main3 :: GHC.Base.String
  {- Unfolding: (case Main.$wmu2cf
                        Main.ex14
                          `cast`
                        (Sym (CofreeTree.NTCo:Mu[0]
                                  <CofreeTree.AST>_N)) of ww { (#,#) ww1 ww2 ->
                 DbExp.prettyWith DbExp.pretty1 (Main.$wcf2db @ () ww2) }) -}
a40ac2bebf1e2e344fbee314f2839488
  main4 :: GHC.Base.String
  {- Unfolding: (case Main.$wmu2cf
                        Main.ex8
                          `cast`
                        (Sym (CofreeTree.NTCo:Mu[0]
                                  <CofreeTree.AST>_N)) of ww { (#,#) ww1 ww2 ->
                 DbExp.prettyWith DbExp.pretty1 (Main.$wcf2db @ () ww2) }) -}
4dfa12fb61b6ca1d59871bff7b2ae403
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
2ac5b1ac3885ca0afc2c5056c4e28d0a
  mu2cf :: CofreeTree.MuTree -> CofreeTree.CfTree ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: CofreeTree.MuTree ->
                 case Main.$wmu2cf w of ww { (#,#) ww1 ww2 ->
                 Control.Comonad.Cofree.:< @ CofreeTree.AST @ () ww1 ww2 }) -}
8ea43b0bf783c7d314bac462b29789cf
  mu2db :: CofreeTree.MuTree -> DbExp.Exp GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: CofreeTree.MuTree -> Main.cf2db @ () (Main.mu2cf x)) -}
263dd2bf95a91499e828a1ecd6aca1f8
  pp :: DbExp.Exp GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.pp1
                  `cast`
                (<DbExp.Exp GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
5cb7c41f5ee7446339de3d897e1d13a8
  pp1 ::
    DbExp.Exp GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: DbExp.Exp GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (DbExp.prettyWith DbExp.pretty1 x)
                   GHC.Types.True
                   eta) -}
6a77126b7a0638365bd19ea0f61876c2
  t1 :: CofreeTree.MuTree
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Main.t4 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N)) -}
6ec261269eee050a5da6b99b09a12aaf
  t10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "z"#) -}
3c9a589cda4fc43cfde8b597d1f319df
  t11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "y"#) -}
0783a5e067cdab2718ec486f29634d0e
  t12 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.t13 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.ex8
                     `cast`
                   (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
7487289fb8e073c7085d28df755e69c0
  t13 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m5,
     Unfolding: (CofreeTree.AIdent
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.labelMeanings17) -}
ccae004addd19097d4d1ae88f8b0d8d0
  t2 :: CofreeTree.MuTree
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Main.t7 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N)) -}
834cef4704189b73c10f3746a8cefcac
  t4 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.t6 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.t5 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
267560ec9cef2850a18175ba7130dda2
  t5 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m5,
     Unfolding: (CofreeTree.AIdent
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.labelMeanings29) -}
5be720da892a1c4c19db0438295ea94b
  t6 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m5,
     Unfolding: (CofreeTree.AIdent
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.labelMeanings24) -}
08d56d47b639dcfb046c473f99bcd935
  t7 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m2,
     Unfolding: (CofreeTree.AApply
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.t12 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))
                   Main.t8 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
9bed35d5486e2c23e320a37fd5650fbb
  t8 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m1,
     Unfolding: (CofreeTree.ALambda
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.t11
                   Main.t9 `cast` (Sym (CofreeTree.NTCo:Mu[0] <CofreeTree.AST>_N))) -}
c31ea77c76ff580a07734b1f7d0c426b
  t9 :: CofreeTree.AST (CofreeTree.Mu CofreeTree.AST)
  {- Strictness: m5,
     Unfolding: (CofreeTree.AIdent
                   @ (CofreeTree.Mu CofreeTree.AST)
                   Main.t10) -}
"SPEC/Main $fApplicativeStateT @ (TypeState
                                   (CfTree ()) (Type, TypeResult)) @ Identity" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                                                                          (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                             (TypeCheck.TypeState
                                                                                                                                                                (CofreeTree.CfTree
                                                                                                                                                                   ())
                                                                                                                                                                (TypeCheck.Type,
                                                                                                                                                                 TypeCheck.TypeResult))
                                                                                                                                                             Data.Functor.Identity.Identity)
                                                                                                                                           $dFunctor1 :: GHC.Base.Functor
                                                                                                                                                           Data.Functor.Identity.Identity
                                                                                                                                           $dMonad :: GHC.Base.Monad
                                                                                                                                                        Data.Functor.Identity.Identity
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ (TypeCheck.TypeState
                                                          (CofreeTree.CfTree ())
                                                          (TypeCheck.Type, TypeCheck.TypeResult))
                                                     @ Data.Functor.Identity.Identity
                                                     $dFunctor
                                                     $dFunctor1
                                                     $dMonad
  = Main.$s$fApplicativeStateT
"SPEC/Main $fFunctorStateT _ @ Identity" [ALWAYS] forall @ s
                                                         $dFunctor :: GHC.Base.Functor
                                                                        Data.Functor.Identity.Identity
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ s
                                                 @ Data.Functor.Identity.Identity
                                                 $dFunctor
  = Main.$s$fApplicativeStateT_$s$fFunctorStateT @ s
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

