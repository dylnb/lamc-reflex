
==================== FINAL INTERFACE ====================
2015-11-03 20:02:51.154715 UTC

interface lamc_5eVrUU1K4dW8f168hbG4XR:TypeCheck 7102
  interface hash: 4d146ae2a4a98383e98d2d3475067872
  ABI hash: 2e882904f0cb945232264cb643f883cf
  export-list hash: b266a438a31c87a4139e63de2b5c7fff
  orphan hash: 46fa9b6534e3b49320a55b2e5133f220
  flag hash: 8ebd6fc67c0b23b062fbd51d8b2bef56
  sig of: Nothing
  used TH splices: False
  where
exports:
  TypeCheck.freshVarId
  TypeCheck.generateConstraints
  TypeCheck.memoizedTC
  TypeCheck.mostGeneralUnifier
  TypeCheck.solveConstraints
  TypeCheck.substitute
  TypeCheck.Constraint{TypeCheck.EqualityConstraint}
  TypeCheck.Type{TypeCheck.TLambda TypeCheck.TNumber TypeCheck.TString TypeCheck.TVar}
  TypeCheck.TypeCheck
  TypeCheck.TypeResult{TypeCheck.TypeResult TypeCheck.assumptions TypeCheck.constraints}
  TypeCheck.TypeState{TypeCheck.TypeState TypeCheck.memo TypeCheck.varId}
module dependencies: CofreeTree
package dependencies: StateVar-1.1.0.1@State_6K4a3UqSdqh6lGAm1wlr9s
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0*
                      base-orphans-0.4.4@baseo_E55c3OEBLyu45sND7mOuE9
                      bifunctors-5@bifun_6cWzSBWZD9ID5wcfOFIydn
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      comonad-4.2.7.2@comon_EsayKmuIGPJJdbMoBEcxRq
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      contravariant-1.3.3@contr_1HGRfJ7yos72LK91k3YDgI
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      distributive-0.4.4@distr_IiTFZxvjHzA0FvKz3AU35Q
                      free-4.12.1@free_2EJeoNML59VIyuzJGfHGjD ghc-prim-0.4.0.0
                      hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      prelude-extras-0.4.0.2@prelu_57eavILAbKD5CaKv31zEDY
                      semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO
                      semigroupoids-5.0.0.4@semig_IPk36dXHATB4yo2y5KnSeX
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      tagged-0.8.1@tagge_6Tf46oJAk552xT73wGffBW
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.List.NonEmpty
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.Semigroup
                         tagged-0.8.1@tagge_6Tf46oJAk552xT73wGffBW:Data.Tagged
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashSet
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:Data.Monoid bd73caba6e77f9944cb89ef5bec300c6
import  -/  base-4.8.1.0:Data.Traversable 89769555cf5e62f4edd3d085405c2caa
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Enum d0db4d619cd8916cc7a23444816222af
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  comonad-4.2.7.2@comon_EsayKmuIGPJJdbMoBEcxRq:Control.Comonad f0fdf88abe807bcdf90a4ea2377f0d0c
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map 5e4cbf1ca2e6c8cfaecf2b4e95371357
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base 7ea108dc1481cad0b32efe810e49ad43
import  -/  free-4.12.1@free_2EJeoNML59VIyuzJGfHGjD:Control.Comonad.Cofree c75d0e75b71777ade08ee79afa8d3c55
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  CofreeTree bce01e372bc8bbfc8df66ff866273871
  exports: 1bb327c1892edca51825a888cd16fcdb
  AApply f570a54c093041534db5a2130ce88ca2
  AIdent 1db2faba7a2cdcdb0bede7decb3e4771
  ALambda b303096f1f853e0ed53c0b9c782f5e17
  ANumber a2f35bc8385d4f354c00d7767f34d8c5
  AST 4f897bd8698aae9036f597c808216a8c
  AString 4285f3fd5a52687557431969e8081434
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.State d96af44e8d2501342f4d849385ed921c
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.State.Class a485e6dd398a6ce0122b254d3bf18f13
import  -/  transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.State.Lazy c08c12a521658e8ac939bca69680ffbc
6af2c5558b7ce5b3e0de195a329e1db1
  $fMonoidTypeResult :: GHC.Base.Monoid TypeCheck.TypeResult
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TypeCheck.TypeResult
                  TypeCheck.$fMonoidTypeResult_$cmempty
                  TypeCheck.$fMonoidTypeResult_$cmappend
                  TypeCheck.$fMonoidTypeResult_$cmconcat -}
6af2c5558b7ce5b3e0de195a329e1db1
  $fMonoidTypeResult_$cmappend ::
    TypeCheck.TypeResult
    -> TypeCheck.TypeResult -> TypeCheck.TypeResult
  {- Arity: 2, Strictness: <L,U(1*U,1*U)><L,U(1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: TypeCheck.TypeResult w1 :: TypeCheck.TypeResult ->
                 case TypeCheck.$w$cmappend w w1 of ww { (#,#) ww1 ww2 ->
                 TypeCheck.TypeResult ww1 ww2 }) -}
6af2c5558b7ce5b3e0de195a329e1db1
  $fMonoidTypeResult_$cmconcat ::
    [TypeCheck.TypeResult] -> TypeCheck.TypeResult
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [TypeCheck.TypeResult] ->
                 case TypeCheck.$wgo w of ww { (#,#) ww1 ww2 ->
                 TypeCheck.TypeResult ww1 ww2 }) -}
6af2c5558b7ce5b3e0de195a329e1db1
  $fMonoidTypeResult_$cmempty :: TypeCheck.TypeResult
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (TypeCheck.TypeResult
                   (GHC.Types.[] @ TypeCheck.Constraint)
                   (Data.Map.Base.Tip @ [GHC.Types.Char] @ [TypeCheck.Type])) -}
97e4cc7580b9c5f966a17c03c12077de
  $fShowConstraint :: GHC.Show.Show TypeCheck.Constraint
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TypeCheck.Constraint
                  TypeCheck.$fShowConstraint_$cshowsPrec1
                  TypeCheck.$fShowConstraint_$cshow
                  TypeCheck.$fShowConstraint_$cshowList -}
97e4cc7580b9c5f966a17c03c12077de
  $fShowConstraint1 :: TypeCheck.Constraint -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: TypeCheck.Constraint w1 :: GHC.Base.String ->
                 case w of ww { TypeCheck.EqualityConstraint ww1 ww2 ->
                 TypeCheck.$w$cshowsPrec 0 ww1 ww2 w1 }) -}
885c9d9e6cbd79a9460a4bfd19e5d3a7
  $fShowConstraint2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "EqualityConstraint "#) -}
73abfa394bb09a0d3b274f3d5c804b30
  $fShowConstraint3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
97e4cc7580b9c5f966a17c03c12077de
  $fShowConstraint_$cshow :: TypeCheck.Constraint -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: TypeCheck.Constraint ->
                 TypeCheck.$fShowConstraint_$cshowsPrec1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
97e4cc7580b9c5f966a17c03c12077de
  $fShowConstraint_$cshowList ::
    [TypeCheck.Constraint] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TypeCheck.Constraint
                   TypeCheck.$fShowConstraint1) -}
24f540569298d33ade7d33ecfb89934d
  $fShowConstraint_$cshowsPrec ::
    GHC.Types.Int -> TypeCheck.Type -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
97e4cc7580b9c5f966a17c03c12077de
  $fShowConstraint_$cshowsPrec1 ::
    GHC.Types.Int -> TypeCheck.Constraint -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: TypeCheck.Constraint
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { TypeCheck.EqualityConstraint ww3 ww4 ->
                 TypeCheck.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
24f540569298d33ade7d33ecfb89934d
  $fShowType :: GHC.Show.Show TypeCheck.Type
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TypeCheck.Type
                  TypeCheck.$fShowConstraint_$cshowsPrec
                  TypeCheck.$fShowType_$cshow
                  TypeCheck.$fShowType_$cshowList -}
24f540569298d33ade7d33ecfb89934d
  $fShowType1 :: TypeCheck.Type -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (TypeCheck.$fShowConstraint_$cshowsPrec
                   TypeCheck.$fShowType2) -}
784835614980fdc777d33e7d4666948e
  $fShowType2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
6af2c5558b7ce5b3e0de195a329e1db1
  $fShowTypeResult :: GHC.Show.Show TypeCheck.TypeResult
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TypeCheck.TypeResult
                  TypeCheck.$fShowTypeResult_$cshowsPrec
                  TypeCheck.$fShowTypeResult_$cshow
                  TypeCheck.$fShowTypeResult_$cshowList -}
6af2c5558b7ce5b3e0de195a329e1db1
  $fShowTypeResult1 :: TypeCheck.TypeResult -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: TypeCheck.TypeResult ->
                 case w of ww { TypeCheck.TypeResult ww1 ww2 ->
                 TypeCheck.$w$cshowsPrec1 0 ww1 ww2 }) -}
2c0d45dfbdce4272e10594ad53ccc29d
  $fShowTypeResult2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeResult {"#) -}
3e71b005a83ee2a4595695cfe10e86a1
  $fShowTypeResult3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
0acc41e04688773fb90c410c16b8748c
  $fShowTypeResult4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "assumptions = "#) -}
3ef0930a8c4b414f314335764faf7891
  $fShowTypeResult5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
2908e01215f3380eacda5413a6a96f77
  $fShowTypeResult6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "constraints = "#) -}
6af2c5558b7ce5b3e0de195a329e1db1
  $fShowTypeResult_$cshow :: TypeCheck.TypeResult -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: TypeCheck.TypeResult ->
                 TypeCheck.$fShowTypeResult_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6af2c5558b7ce5b3e0de195a329e1db1
  $fShowTypeResult_$cshowList ::
    [TypeCheck.TypeResult] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TypeCheck.TypeResult
                   TypeCheck.$fShowTypeResult1) -}
6af2c5558b7ce5b3e0de195a329e1db1
  $fShowTypeResult_$cshowsPrec ::
    GHC.Types.Int -> TypeCheck.TypeResult -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: TypeCheck.TypeResult ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { TypeCheck.TypeResult ww3 ww4 ->
                 TypeCheck.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
b5cb84ea57a86486fb5b838fdb6369e3
  $fShowTypeResult_$s$fShow[] :: GHC.Show.Show [TypeCheck.Type]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [TypeCheck.Type]
                  TypeCheck.$fShowTypeResult_$s$fShow[]_$cshowsPrec
                  TypeCheck.$fShowTypeResult_$s$fShow[]_$cshow
                  TypeCheck.$fShowTypeResult_$s$fShow[]_$cshowList -}
b9fc96c0a979c39ff803d3fd25532b53
  $fShowTypeResult_$s$fShow[]_$cshow ::
    [TypeCheck.Type] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [TypeCheck.Type] ->
                 TypeCheck.$fShowType_$cshowList
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
67fb737403d61020fda9421a5938e625
  $fShowTypeResult_$s$fShow[]_$cshowList ::
    [[TypeCheck.Type]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [[TypeCheck.Type]] eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ [TypeCheck.Type]
                   TypeCheck.$fShowType_$cshowList
                   eta
                   eta1) -}
4d8f82f961f510247027d29f9fb5ab46
  $fShowTypeResult_$s$fShow[]_$cshowsPrec ::
    GHC.Types.Int -> [TypeCheck.Type] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: [TypeCheck.Type]
                   eta1 :: GHC.Base.String ->
                 TypeCheck.$fShowType_$cshowList eta eta1) -}
24f540569298d33ade7d33ecfb89934d
  $fShowType_$cshow :: TypeCheck.Type -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: TypeCheck.Type ->
                 TypeCheck.$fShowConstraint_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
24f540569298d33ade7d33ecfb89934d
  $fShowType_$cshowList :: [TypeCheck.Type] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TypeCheck.Type
                   TypeCheck.$fShowType1) -}
2feb6efd8e83d4f677e2a85c382995c2
  $s$fEqCofree ::
    GHC.Classes.Eq (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                  (Control.Comonad.Cofree.$fEqCofree_$c==
                     @ CofreeTree.AST
                     @ ()
                     TypeCheck.$s$fEqCofree1
                     GHC.Classes.$fEq())
                  TypeCheck.$s$fEqCofree_$s$fEqCofree_$c/= -}
6a78e9a83017b9e20cb7b28c98b78184
  $s$fEqCofree1 ::
    GHC.Classes.Eq
      (CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ()))
  {- Unfolding: (CofreeTree.$fEqAST
                   @ (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                   TypeCheck.$s$fEqCofree2) -}
532651420ef3720bc71751c5d4de8e15
  $s$fEqCofree2 ::
    GHC.Classes.Eq (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
  {- Strictness: m -}
d875ac6a691310da084942852a0613f6
  $s$fEqCofree_$s$fEqCofree_$c/= ::
    Control.Comonad.Cofree.Cofree CofreeTree.AST ()
    -> Control.Comonad.Cofree.Cofree CofreeTree.AST ()
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SS),1*U(1*H,1*U)><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ x :: Control.Comonad.Cofree.Cofree CofreeTree.AST ()
                   y :: Control.Comonad.Cofree.Cofree CofreeTree.AST () ->
                 GHC.Classes.not
                   (Control.Comonad.Cofree.$fEqCofree_$c==
                      @ CofreeTree.AST
                      @ ()
                      TypeCheck.$s$fEqCofree1
                      GHC.Classes.$fEq()
                      x
                      y)) -}
3afc216804969212b80a098d84ef8028
  $s$fOrdAST ::
    GHC.Classes.Ord
      (CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ()))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (CofreeTree.AST
                       (Control.Comonad.Cofree.Cofree CofreeTree.AST ()))
                  TypeCheck.$s$fEqCofree1
                  (CofreeTree.$fOrdAST_$ccompare
                     @ (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                     TypeCheck.$s$fEqCofree1
                     TypeCheck.$s$fOrdAST1)
                  TypeCheck.$s$fOrdAST_$s$fOrdAST_$c<
                  TypeCheck.$s$fOrdAST_$s$fOrdAST_$c<=
                  TypeCheck.$s$fOrdAST_$s$fOrdAST_$c>
                  TypeCheck.$s$fOrdAST_$s$fOrdAST_$c>=
                  TypeCheck.$s$fOrdAST_$s$fOrdAST_$cmax
                  TypeCheck.$s$fOrdAST_$s$fOrdAST_$cmin -}
e7b352d848df499cb098bf2372057999
  $s$fOrdAST1 ::
    GHC.Classes.Ord (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
  {- Strictness: m -}
2e23472774b493eac23ca60f0e6ccfdd
  $s$fOrdAST_$s$fOrdAST_$c< ::
    CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                   y :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ()) ->
                 case CofreeTree.$fOrdAST_$ccompare
                        @ (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                        TypeCheck.$s$fEqCofree1
                        TypeCheck.$s$fOrdAST1
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
307a3cb170b3ba9c16efef844199c7d2
  $s$fOrdAST_$s$fOrdAST_$c<= ::
    CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                   y :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ()) ->
                 case CofreeTree.$fOrdAST_$ccompare
                        @ (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                        TypeCheck.$s$fEqCofree1
                        TypeCheck.$s$fOrdAST1
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
7042b021cf3806e077cd15ca99e5eb2c
  $s$fOrdAST_$s$fOrdAST_$c> ::
    CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                   y :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ()) ->
                 case CofreeTree.$fOrdAST_$ccompare
                        @ (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                        TypeCheck.$s$fEqCofree1
                        TypeCheck.$s$fOrdAST1
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
9c1b74655054cefe244d8b77d1d3ffb7
  $s$fOrdAST_$s$fOrdAST_$c>= ::
    CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                   y :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ()) ->
                 case CofreeTree.$fOrdAST_$ccompare
                        @ (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                        TypeCheck.$s$fEqCofree1
                        TypeCheck.$s$fOrdAST1
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
7d2527f9766721b6632aad37a9df7688
  $s$fOrdAST_$s$fOrdAST_$cmax ::
    CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                   y :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ()) ->
                 case CofreeTree.$fOrdAST_$ccompare
                        @ (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                        TypeCheck.$s$fEqCofree1
                        TypeCheck.$s$fOrdAST1
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
040cd86aa44c10b9110ad3b8e365d426
  $s$fOrdAST_$s$fOrdAST_$cmin ::
    CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                   y :: CofreeTree.AST
                          (Control.Comonad.Cofree.Cofree CofreeTree.AST ()) ->
                 case CofreeTree.$fOrdAST_$ccompare
                        @ (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                        TypeCheck.$s$fEqCofree1
                        TypeCheck.$s$fOrdAST1
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
6aa88127395d84c6450855c60774ffbd
  $s$fOrdCofree ::
    GHC.Classes.Ord (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                  TypeCheck.$s$fEqCofree2
                  (Control.Comonad.Cofree.$fOrdCofree_$ccompare
                     @ CofreeTree.AST
                     @ ()
                     TypeCheck.$s$fEqCofree2
                     TypeCheck.$s$fOrdCofree1
                     GHC.Classes.$fOrd())
                  (Control.Comonad.Cofree.$fOrdCofree_$c<
                     @ CofreeTree.AST
                     @ ()
                     TypeCheck.$s$fEqCofree2
                     TypeCheck.$s$fOrdCofree1
                     GHC.Classes.$fOrd())
                  (Control.Comonad.Cofree.$fOrdCofree_$c<=
                     @ CofreeTree.AST
                     @ ()
                     TypeCheck.$s$fEqCofree2
                     TypeCheck.$s$fOrdCofree1
                     GHC.Classes.$fOrd())
                  (Control.Comonad.Cofree.$fOrdCofree_$c>
                     @ CofreeTree.AST
                     @ ()
                     TypeCheck.$s$fEqCofree2
                     TypeCheck.$s$fOrdCofree1
                     GHC.Classes.$fOrd())
                  (Control.Comonad.Cofree.$fOrdCofree_$c>=
                     @ CofreeTree.AST
                     @ ()
                     TypeCheck.$s$fEqCofree2
                     TypeCheck.$s$fOrdCofree1
                     GHC.Classes.$fOrd())
                  (Control.Comonad.Cofree.$fOrdCofree_$cmax
                     @ CofreeTree.AST
                     @ ()
                     TypeCheck.$s$fEqCofree2
                     TypeCheck.$s$fOrdCofree1
                     GHC.Classes.$fOrd())
                  (Control.Comonad.Cofree.$fOrdCofree_$cmin
                     @ CofreeTree.AST
                     @ ()
                     TypeCheck.$s$fEqCofree2
                     TypeCheck.$s$fOrdCofree1
                     GHC.Classes.$fOrd()) -}
b1a52c2d62b308b3b36be5c8d24822dd
  $s$fOrdCofree1 ::
    GHC.Classes.Ord
      (CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ()))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) TypeCheck.$s$fOrdAST -}
a2acf42620a66504480e5f3de4b70d35
  $sdelete_$sgo10 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a1
    -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
f5f74256d6a376960ae1251d352392f0
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
6af2c5558b7ce5b3e0de195a329e1db1
  $w$cmappend ::
    TypeCheck.TypeResult
    -> TypeCheck.TypeResult
    -> (# [TypeCheck.Constraint],
          Data.Map.Base.Map GHC.Base.String [TypeCheck.Type] #)
  {- Arity: 2, Strictness: <L,U(1*U,1*U)><L,U(1*U,1*U)>, Inline: [0],
     Unfolding: (\ w :: TypeCheck.TypeResult
                   w1 :: TypeCheck.TypeResult ->
                 (# case w of wild { TypeCheck.TypeResult ds ds1 ->
                    GHC.Base.++
                      @ TypeCheck.Constraint
                      ds
                      (case w1 of wild1 { TypeCheck.TypeResult ds2 ds3 -> ds2 }) },
                    case w of wild { TypeCheck.TypeResult ds ds1 ->
                    case ds1 of wild1 {
                      Data.Map.Base.Bin ipv ipv1 ipv2 ipv3 ipv4
                      -> case w1 of wild2 { TypeCheck.TypeResult ds2 ds3 ->
                         case ds3 of wild3 {
                           Data.Map.Base.Bin ipv5 ipv6 ipv7 ipv8 ipv9
                           -> Data.Map.Base.union_$shedgeUnion
                                @ [GHC.Types.Char]
                                @ [TypeCheck.Type]
                                GHC.Classes.$fOrd[]_$s$fOrd[]1
                                (Data.Map.Base.NothingS @ [GHC.Types.Char])
                                (Data.Map.Base.NothingS @ [GHC.Types.Char])
                                ipv
                                ipv1
                                ipv2
                                ipv3
                                ipv4
                                ipv5
                                ipv6
                                ipv7
                                ipv8
                                ipv9
                           Data.Map.Base.Tip -> wild1 } }
                      Data.Map.Base.Tip
                      -> case w1 of wild2 { TypeCheck.TypeResult ds2 ds3 ->
                         ds3 } } } #)) -}
95f6750e5ccaf1e69eaf19e700c4f290
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> TypeCheck.Type
    -> TypeCheck.Type
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: TypeCheck.Type
                   ww2 :: TypeCheck.Type
                   w :: GHC.Base.String ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     TypeCheck.$fShowConstraint_$cshowsPrec
                       TypeCheck.$fShowConstraint3
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (TypeCheck.$fShowConstraint_$cshowsPrec
                             TypeCheck.$fShowConstraint3
                             ww2
                             x))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char TypeCheck.$fShowConstraint2 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           TypeCheck.$fShowConstraint2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
3bd2e6ceebe89fdf03926a237af51c13
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [TypeCheck.Constraint]
    -> Data.Map.Base.Map GHC.Base.String [TypeCheck.Type]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [TypeCheck.Constraint]
                   ww2 :: Data.Map.Base.Map GHC.Base.String [TypeCheck.Type] ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Base.$w$cshowsPrec
                       @ [GHC.Types.Char]
                       @ [TypeCheck.Type]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       TypeCheck.$fShowTypeResult_$s$fShow[]
                       0
                       ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       TypeCheck.$fShowTypeResult6
                       (let {
                          s :: GHC.Base.String
                          = GHC.Base.++
                              @ GHC.Types.Char
                              TypeCheck.$fShowTypeResult5
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 TypeCheck.$fShowTypeResult4
                                 (f (GHC.Base.++ @ GHC.Types.Char TypeCheck.$fShowTypeResult3 x)))
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# "[]"# s
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (case x1 of ww3 { TypeCheck.EqualityConstraint ww4 ww5 ->
                                TypeCheck.$w$cshowsPrec
                                  0
                                  ww4
                                  ww5
                                  (let {
                                     lvl21 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                   } in
                                   letrec {
                                     showl :: [TypeCheck.Constraint] -> [GHC.Types.Char]
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ ds2 :: [TypeCheck.Constraint] ->
                                       case ds2 of wild1 {
                                         [] -> lvl21
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (case y of ww6 { TypeCheck.EqualityConstraint ww7 ww8 ->
                                               TypeCheck.$w$cshowsPrec 0 ww7 ww8 (showl ys) }) }
                                   } in
                                   showl xs) }) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char TypeCheck.$fShowTypeResult2 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           TypeCheck.$fShowTypeResult2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
bd19c4279282bafeb6ee1176a0d28b8d
  $wa ::
    ()
    -> CofreeTree.AST (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
    -> TypeCheck.TypeState
         (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
         (TypeCheck.Type, TypeCheck.TypeResult)
    -> (# (TypeCheck.Type, TypeCheck.TypeResult),
          TypeCheck.TypeState
            (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
            (TypeCheck.Type, TypeCheck.TypeResult) #)
  {- Arity: 3, Strictness: <S,1*H><S,1*U><L,U(U(U),U)>,
     Inline: [0] -}
405bbeda970983f8ea5320c83ea29a02
  $wa1 ::
    GHC.Base.Maybe (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
    -> TypeCheck.Type
    -> TypeCheck.Type
    -> GHC.Base.Maybe (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GHC.Base.Maybe
                          (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
                   ww :: TypeCheck.Type
                   ww1 :: TypeCheck.Type ->
                 case w of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
                   GHC.Base.Just x
                   -> case TypeCheck.mostGeneralUnifier
                             (TypeCheck.substitute x ww)
                             (TypeCheck.substitute x ww1) of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
                        GHC.Base.Just a6
                        -> GHC.Base.Just
                             @ (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
                             (case a6 of wild2 {
                                Data.Map.Base.Bin ipv ipv1 ipv2 ipv3 ipv4
                                -> case x of wild3 {
                                     Data.Map.Base.Bin ipv5 ipv6 ipv7 ipv8 ipv9
                                     -> Data.Map.Base.union_$shedgeUnion
                                          @ GHC.Types.Int
                                          @ TypeCheck.Type
                                          GHC.Classes.$fOrdInt
                                          (Data.Map.Base.NothingS @ GHC.Types.Int)
                                          (Data.Map.Base.NothingS @ GHC.Types.Int)
                                          ipv
                                          ipv1
                                          ipv2
                                          ipv3
                                          ipv4
                                          ipv5
                                          ipv6
                                          ipv7
                                          ipv8
                                          ipv9
                                     Data.Map.Base.Tip -> wild2 }
                                Data.Map.Base.Tip -> x }) } }) -}
6af2c5558b7ce5b3e0de195a329e1db1
  $wgo ::
    [TypeCheck.TypeResult]
    -> (# [TypeCheck.Constraint],
          Data.Map.Base.Map GHC.Base.String [TypeCheck.Type] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
ad3a074eaa12a5b4e71dbea0484b216d
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
97e4cc7580b9c5f966a17c03c12077de
  data Constraint = EqualityConstraint TypeCheck.Type TypeCheck.Type
24f540569298d33ade7d33ecfb89934d
  data Type
    = TLambda TypeCheck.Type TypeCheck.Type
    | TVar GHC.Types.Int
    | TNumber
    | TString
23a028ceae3bd3d961cff0e5d815fcfa
  type TypeCheck t =
    Control.Monad.Trans.State.Lazy.State
      (TypeCheck.TypeState t (TypeCheck.Type, TypeCheck.TypeResult))
      (TypeCheck.Type, TypeCheck.TypeResult)
6af2c5558b7ce5b3e0de195a329e1db1
  data TypeResult
    = TypeResult {constraints :: [TypeCheck.Constraint],
                  assumptions :: Data.Map.Base.Map GHC.Base.String [TypeCheck.Type]}
5c5708210d4485ce085122f9093c2b20
  type role TypeState nominal representational
  data TypeState t m
    = TypeState {varId :: GHC.Types.Int, memo :: Data.Map.Base.Map t m}
c591cba4c5e26f62f9b96297a0426df1
  assumptions ::
    TypeCheck.TypeResult
    -> Data.Map.Base.Map GHC.Base.String [TypeCheck.Type]
  RecSel TypeCheck.TypeResult
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: TypeCheck.TypeResult ->
                 case ds of wild { TypeCheck.TypeResult ds1 ds2 -> ds2 }) -}
0762052a1f9a2f9143e5794bfe113b05
  constraints :: TypeCheck.TypeResult -> [TypeCheck.Constraint]
  RecSel TypeCheck.TypeResult
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: TypeCheck.TypeResult ->
                 case ds of wild { TypeCheck.TypeResult ds1 ds2 -> ds1 }) -}
ebf4b386671422451a998455af34828b
  freshVarId ::
    Control.Monad.Trans.State.Lazy.State
      (TypeCheck.TypeState t m) TypeCheck.Type
  {- Arity: 1, Strictness: <L,U(1*U(U),U)>m,
     Unfolding: InlineRule (0, True, True)
                TypeCheck.freshVarId1
                  `cast`
                (forall t m.
                 Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                          <TypeCheck.TypeState t m>_N
                          <Data.Functor.Identity.Identity>_R
                          <TypeCheck.Type>_N)) -}
b52c484c904c29fed38554b6fe814c2c
  freshVarId1 ::
    TypeCheck.TypeState t m
    -> Data.Functor.Identity.Identity
         (TypeCheck.Type, TypeCheck.TypeState t m)
  {- Arity: 1, Strictness: <L,U(1*U(U),U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ t @ m w :: TypeCheck.TypeState t m ->
                 let {
                   v :: GHC.Types.Int
                   = case w of wild { TypeCheck.TypeState ds ds1 -> ds }
                 } in
                 (TypeCheck.TVar v,
                  case w of wild { TypeCheck.TypeState ds ds1 ->
                  TypeCheck.TypeState
                    @ t
                    @ m
                    (case v of wild1 { GHC.Types.I# x1 ->
                     case x1 of wild2 {
                       DEFAULT -> GHC.Types.I# (GHC.Prim.+# wild2 1)
                       9223372036854775807 -> GHC.Enum.$fEnumInt2 } })
                    ds1 })
                   `cast`
                 (Sym (Data.Functor.Identity.NTCo:Identity[0]
                           <(TypeCheck.Type, TypeCheck.TypeState t m)>_R))) -}
13a8a9d22b6c4310292ff64eaeabd4d1
  generateConstraints ::
    Control.Comonad.Cofree.Cofree CofreeTree.AST ()
    -> TypeCheck.TypeCheck
         (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
  {- Arity: 2, Strictness: <S(SS),1*U(1*H,1*U)><L,U(U(U),U)>m,
     Unfolding: InlineRule (0, True, True)
                TypeCheck.generateConstraints1
                  `cast`
                (<Control.Comonad.Cofree.Cofree CofreeTree.AST ()>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                               <TypeCheck.TypeState
                                  (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                                  (TypeCheck.Type, TypeCheck.TypeResult)>_N
                               <Data.Functor.Identity.Identity>_R
                               <(TypeCheck.Type, TypeCheck.TypeResult)>_N)) -}
07afdebca3649e1fcf3b39ecd1d1a0f6
  generateConstraints1 ::
    Control.Comonad.Cofree.Cofree CofreeTree.AST ()
    -> TypeCheck.TypeState
         (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
         (TypeCheck.Type, TypeCheck.TypeResult)
    -> Data.Functor.Identity.Identity
         ((TypeCheck.Type, TypeCheck.TypeResult),
          TypeCheck.TypeState
            (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
            (TypeCheck.Type, TypeCheck.TypeResult))
  {- Arity: 2, Strictness: <S(SS),1*U(1*H,1*U)><L,U(U(U),U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Control.Comonad.Cofree.Cofree CofreeTree.AST ()
                   w1 :: TypeCheck.TypeState
                           (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                           (TypeCheck.Type, TypeCheck.TypeResult) ->
                 case w of ww { Control.Comonad.Cofree.:< ww1 ww2 ->
                 case ww1 of ww3 { () ->
                 case TypeCheck.$wa GHC.Tuple.() ww2 w1 of ww4 { (#,#) ww5 ww6 ->
                 (ww5, ww6)
                   `cast`
                 (Sym (Data.Functor.Identity.NTCo:Identity[0]
                           <((TypeCheck.Type, TypeCheck.TypeResult),
                             TypeCheck.TypeState
                               (Control.Comonad.Cofree.Cofree CofreeTree.AST ())
                               (TypeCheck.Type, TypeCheck.TypeResult))>_R)) } } }) -}
4100bb5bdd06de23b1843a4cff944521
  memo :: TypeCheck.TypeState t m -> Data.Map.Base.Map t m
  RecSel TypeCheck.TypeState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t @ m ds :: TypeCheck.TypeState t m ->
                 case ds of wild { TypeCheck.TypeState ds1 ds2 -> ds2 }) -}
d85c8e4edaa322ced0c3b333d5ff4d3d
  memoizedTC ::
    GHC.Classes.Ord c =>
    (c -> TypeCheck.TypeCheck c) -> c -> TypeCheck.TypeCheck c
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ c
                   $dOrd :: GHC.Classes.Ord c
                   f :: c -> TypeCheck.TypeCheck c
                   c1 :: c ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           (TypeCheck.TypeState c (TypeCheck.Type, TypeCheck.TypeResult))
                           Data.Functor.Identity.Identity
                           (TypeCheck.Type, TypeCheck.TypeResult)
                   = f c1
                 } in
                 (\ eta :: TypeCheck.TypeState
                             c (TypeCheck.Type, TypeCheck.TypeResult) ->
                  case eta of wild { TypeCheck.TypeState ds ds1 ->
                  case Data.Map.Base.lookup
                         @ c
                         @ (TypeCheck.Type, TypeCheck.TypeResult)
                         $dOrd
                         c1
                         ds1 of wild1 {
                    GHC.Base.Nothing
                    -> let {
                         a6 :: Data.Functor.Identity.Identity
                                 ((TypeCheck.Type, TypeCheck.TypeResult),
                                  TypeCheck.TypeState c (TypeCheck.Type, TypeCheck.TypeResult))
                         = m1
                             `cast`
                           (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                                <TypeCheck.TypeState c (TypeCheck.Type, TypeCheck.TypeResult)>_N
                                <Data.Functor.Identity.Identity>_R
                                <(TypeCheck.Type, TypeCheck.TypeResult)>_N)
                             wild
                       } in
                       let {
                         r :: (TypeCheck.Type, TypeCheck.TypeResult)
                         = case a6
                                  `cast`
                                (Data.Functor.Identity.NTCo:Identity[0]
                                     <((TypeCheck.Type, TypeCheck.TypeResult),
                                       TypeCheck.TypeState
                                         c
                                         (TypeCheck.Type,
                                          TypeCheck.TypeResult))>_R) of wild2 { (,) a7 s' ->
                           a7 }
                       } in
                       (r,
                        case a6
                               `cast`
                             (Data.Functor.Identity.NTCo:Identity[0]
                                  <((TypeCheck.Type, TypeCheck.TypeResult),
                                    TypeCheck.TypeState
                                      c
                                      (TypeCheck.Type,
                                       TypeCheck.TypeResult))>_R) of wild2 { (,) a7 s' ->
                        case s' of wild3 { TypeCheck.TypeState ds2 ds3 ->
                        TypeCheck.TypeState
                          @ c
                          @ (TypeCheck.Type, TypeCheck.TypeResult)
                          ds2
                          (Data.Map.Base.insert
                             @ c
                             @ (TypeCheck.Type, TypeCheck.TypeResult)
                             $dOrd
                             c1
                             r
                             ds3) } })
                         `cast`
                       (Sym (Data.Functor.Identity.NTCo:Identity[0]
                                 <((TypeCheck.Type, TypeCheck.TypeResult),
                                   TypeCheck.TypeState
                                     c (TypeCheck.Type, TypeCheck.TypeResult))>_R))
                    GHC.Base.Just x
                    -> (x, wild)
                         `cast`
                       (Sym (Data.Functor.Identity.NTCo:Identity[0]
                                 <((TypeCheck.Type, TypeCheck.TypeResult),
                                   TypeCheck.TypeState
                                     c (TypeCheck.Type, TypeCheck.TypeResult))>_R)) } })
                   `cast`
                 (Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                           <TypeCheck.TypeState c (TypeCheck.Type, TypeCheck.TypeResult)>_N
                           <Data.Functor.Identity.Identity>_R
                           <(TypeCheck.Type, TypeCheck.TypeResult)>_N))) -}
28d377d20b7707bd992ad3c57b6d5830
  mostGeneralUnifier ::
    TypeCheck.Type
    -> TypeCheck.Type
    -> GHC.Base.Maybe (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
92a0fb7a9f8822d8879a05534977b181
  solveConstraints ::
    [TypeCheck.Constraint]
    -> GHC.Base.Maybe (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
  {- Arity: 1,
     Unfolding: (GHC.List.foldl
                   @ TypeCheck.Constraint
                   @ (GHC.Base.Maybe (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type))
                   TypeCheck.solveConstraints2
                   TypeCheck.solveConstraints1) -}
364ffa60ac6a2a8bb6a67947579b6da8
  solveConstraints1 ::
    GHC.Base.Maybe (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
                   (Data.Map.Base.Tip @ GHC.Types.Int @ TypeCheck.Type)) -}
c1fb8683ae52be11c0c90bb110aea626
  solveConstraints2 ::
    GHC.Base.Maybe (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
    -> TypeCheck.Constraint
    -> GHC.Base.Maybe (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
  {- Arity: 2, Strictness: <S,1*U><S,1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Base.Maybe
                          (Data.Map.Base.Map GHC.Types.Int TypeCheck.Type)
                   w1 :: TypeCheck.Constraint ->
                 case w1 of ww { TypeCheck.EqualityConstraint ww1 ww2 ->
                 TypeCheck.$wa1 w ww1 ww2 }) -}
4672546fc09b6ef9456dd5840b896b55
  substitute ::
    Data.Map.Base.Map GHC.Types.Int TypeCheck.Type
    -> TypeCheck.Type -> TypeCheck.Type
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
5eacfacfb10cbe156f99c684c9c362d4
  varId :: TypeCheck.TypeState t m -> GHC.Types.Int
  RecSel TypeCheck.TypeState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t @ m ds :: TypeCheck.TypeState t m ->
                 case ds of wild { TypeCheck.TypeState ds1 ds2 -> ds1 }) -}
instance GHC.Base.Monoid [TypeCheck.TypeResult]
  = TypeCheck.$fMonoidTypeResult
instance GHC.Show.Show [TypeCheck.Constraint]
  = TypeCheck.$fShowConstraint
instance GHC.Show.Show [TypeCheck.Type] = TypeCheck.$fShowType
instance GHC.Show.Show [TypeCheck.TypeResult]
  = TypeCheck.$fShowTypeResult
"SPEC/TypeCheck $fEqCofree @ AST @ ()" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                 (CofreeTree.AST
                                                                    (Control.Comonad.Cofree.Cofree
                                                                       CofreeTree.AST ()))
                                                       $dEq1 :: GHC.Classes.Eq ()
  Control.Comonad.Cofree.$fEqCofree @ CofreeTree.AST @ () $dEq $dEq1
  = TypeCheck.$s$fEqCofree
"SPEC/TypeCheck $fEqCofree_$c/= @ AST @ ()" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      (CofreeTree.AST
                                                                         (Control.Comonad.Cofree.Cofree
                                                                            CofreeTree.AST ()))
                                                            $dEq1 :: GHC.Classes.Eq ()
  Control.Comonad.Cofree.$fEqCofree_$c/= @ CofreeTree.AST
                                         @ ()
                                         $dEq
                                         $dEq1
  = TypeCheck.$s$fEqCofree_$s$fEqCofree_$c/=
"SPEC/TypeCheck $fOrdAST @ (Cofree AST ())" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      (CofreeTree.AST
                                                                         (Control.Comonad.Cofree.Cofree
                                                                            CofreeTree.AST ()))
                                                            $dOrd :: GHC.Classes.Ord
                                                                       (Control.Comonad.Cofree.Cofree
                                                                          CofreeTree.AST ())
  CofreeTree.$fOrdAST @ (Control.Comonad.Cofree.Cofree
                           CofreeTree.AST ())
                      $dEq
                      $dOrd
  = TypeCheck.$s$fOrdAST
"SPEC/TypeCheck $fOrdAST_$c< @ (Cofree AST ())" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                          (CofreeTree.AST
                                                                             (Control.Comonad.Cofree.Cofree
                                                                                CofreeTree.AST ()))
                                                                $dOrd :: GHC.Classes.Ord
                                                                           (Control.Comonad.Cofree.Cofree
                                                                              CofreeTree.AST ())
  CofreeTree.$fOrdAST_$c< @ (Control.Comonad.Cofree.Cofree
                               CofreeTree.AST ())
                          $dEq
                          $dOrd
  = TypeCheck.$s$fOrdAST_$s$fOrdAST_$c<
"SPEC/TypeCheck $fOrdAST_$c<= @ (Cofree AST ())" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                           (CofreeTree.AST
                                                                              (Control.Comonad.Cofree.Cofree
                                                                                 CofreeTree.AST ()))
                                                                 $dOrd :: GHC.Classes.Ord
                                                                            (Control.Comonad.Cofree.Cofree
                                                                               CofreeTree.AST ())
  CofreeTree.$fOrdAST_$c<= @ (Control.Comonad.Cofree.Cofree
                                CofreeTree.AST ())
                           $dEq
                           $dOrd
  = TypeCheck.$s$fOrdAST_$s$fOrdAST_$c<=
"SPEC/TypeCheck $fOrdAST_$c> @ (Cofree AST ())" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                          (CofreeTree.AST
                                                                             (Control.Comonad.Cofree.Cofree
                                                                                CofreeTree.AST ()))
                                                                $dOrd :: GHC.Classes.Ord
                                                                           (Control.Comonad.Cofree.Cofree
                                                                              CofreeTree.AST ())
  CofreeTree.$fOrdAST_$c> @ (Control.Comonad.Cofree.Cofree
                               CofreeTree.AST ())
                          $dEq
                          $dOrd
  = TypeCheck.$s$fOrdAST_$s$fOrdAST_$c>
"SPEC/TypeCheck $fOrdAST_$c>= @ (Cofree AST ())" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                           (CofreeTree.AST
                                                                              (Control.Comonad.Cofree.Cofree
                                                                                 CofreeTree.AST ()))
                                                                 $dOrd :: GHC.Classes.Ord
                                                                            (Control.Comonad.Cofree.Cofree
                                                                               CofreeTree.AST ())
  CofreeTree.$fOrdAST_$c>= @ (Control.Comonad.Cofree.Cofree
                                CofreeTree.AST ())
                           $dEq
                           $dOrd
  = TypeCheck.$s$fOrdAST_$s$fOrdAST_$c>=
"SPEC/TypeCheck $fOrdAST_$cmax @ (Cofree AST ())" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                            (CofreeTree.AST
                                                                               (Control.Comonad.Cofree.Cofree
                                                                                  CofreeTree.AST
                                                                                  ()))
                                                                  $dOrd :: GHC.Classes.Ord
                                                                             (Control.Comonad.Cofree.Cofree
                                                                                CofreeTree.AST ())
  CofreeTree.$fOrdAST_$cmax @ (Control.Comonad.Cofree.Cofree
                                 CofreeTree.AST ())
                            $dEq
                            $dOrd
  = TypeCheck.$s$fOrdAST_$s$fOrdAST_$cmax
"SPEC/TypeCheck $fOrdAST_$cmin @ (Cofree AST ())" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                            (CofreeTree.AST
                                                                               (Control.Comonad.Cofree.Cofree
                                                                                  CofreeTree.AST
                                                                                  ()))
                                                                  $dOrd :: GHC.Classes.Ord
                                                                             (Control.Comonad.Cofree.Cofree
                                                                                CofreeTree.AST ())
  CofreeTree.$fOrdAST_$cmin @ (Control.Comonad.Cofree.Cofree
                                 CofreeTree.AST ())
                            $dEq
                            $dOrd
  = TypeCheck.$s$fOrdAST_$s$fOrdAST_$cmin
"SPEC/TypeCheck $fOrdCofree @ AST @ ()" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                  (Control.Comonad.Cofree.Cofree
                                                                     CofreeTree.AST ())
                                                        $dOrd :: GHC.Classes.Ord
                                                                   (CofreeTree.AST
                                                                      (Control.Comonad.Cofree.Cofree
                                                                         CofreeTree.AST ()))
                                                        $dOrd1 :: GHC.Classes.Ord ()
  Control.Comonad.Cofree.$fOrdCofree @ CofreeTree.AST
                                     @ ()
                                     $dEq
                                     $dOrd
                                     $dOrd1
  = TypeCheck.$s$fOrdCofree
"SPEC/TypeCheck $fShow[] @ Type" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             TypeCheck.Type
  GHC.Show.$fShow[] @ TypeCheck.Type $dShow
  = TypeCheck.$fShowTypeResult_$s$fShow[]
"SPEC/TypeCheck $fShow[]_$cshow @ Type" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    TypeCheck.Type
  GHC.Show.$fShow[]_$cshow @ TypeCheck.Type $dShow
  = TypeCheck.$fShowTypeResult_$s$fShow[]_$cshow
"SPEC/TypeCheck $fShow[]_$cshowList @ Type" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                        TypeCheck.Type
  GHC.Show.$fShow[]_$cshowList @ TypeCheck.Type $dShow
  = TypeCheck.$fShowTypeResult_$s$fShow[]_$cshowList
"SPEC/TypeCheck $fShow[]_$cshowsPrec @ Type" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                         TypeCheck.Type
  GHC.Show.$fShow[]_$cshowsPrec @ TypeCheck.Type $dShow
  = TypeCheck.$fShowTypeResult_$s$fShow[]_$cshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

